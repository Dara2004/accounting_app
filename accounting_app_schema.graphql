enum AccountT {
  ASSET
  PAYABLES
  RECEIVABLES
  INVENTORIES
  LIABILITY
  REVENUE
  COST_OF_GOODS_SOLD
  EXPENSES
  EQUITIES
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type Bill implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  billId: Int!
  status: BillStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: BigInt
  vendorId: BigInt
  poId: BigInt

  """Reads a single `ChartOfAccount` that is related to this `Bill`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `Bill`."""
  vendorByVendorId: Vendor

  """Reads a single `PurchaseOrder` that is related to this `Bill`."""
  purchaseOrderByPoId: PurchaseOrder

  """Reads and enables pagination through a set of `BillPayment`."""
  billPaymentsByBillId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillPaymentCondition
  ): BillPaymentsConnection!

  """Reads and enables pagination through a set of `SubBillPayment`."""
  subBillPaymentsByBillId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubBillPaymentCondition
  ): SubBillPaymentsConnection!
}

"""
A condition to be used against `Bill` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BillCondition {
  """Checks for equality with the object’s `billId` field."""
  billId: Int

  """Checks for equality with the object’s `status` field."""
  status: BillStatus

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `paymentDue` field."""
  paymentDue: Date

  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `vendorId` field."""
  vendorId: BigInt

  """Checks for equality with the object’s `poId` field."""
  poId: BigInt
}

"""An input for mutations affecting `Bill`"""
input BillInput {
  billId: Int
  status: BillStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: BigInt
  vendorId: BigInt
  poId: BigInt
}

"""Represents an update to a `Bill`. Fields that are set will be updated."""
input BillPatch {
  billId: Int
  status: BillStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: BigInt
  vendorId: BigInt
  poId: BigInt
}

type BillPayment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  billPaymentId: Int!
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: BigInt
  billId: BigInt

  """Reads a single `ChartOfAccount` that is related to this `BillPayment`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Bill` that is related to this `BillPayment`."""
  billByBillId: Bill

  """Reads and enables pagination through a set of `SubBillPayment`."""
  subBillPaymentsByBillPaymentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubBillPaymentCondition
  ): SubBillPaymentsConnection!
}

"""
A condition to be used against `BillPayment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BillPaymentCondition {
  """Checks for equality with the object’s `billPaymentId` field."""
  billPaymentId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `paymentMethod` field."""
  paymentMethod: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `billId` field."""
  billId: BigInt
}

"""An input for mutations affecting `BillPayment`"""
input BillPaymentInput {
  billPaymentId: Int
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: BigInt
  billId: BigInt
}

"""
Represents an update to a `BillPayment`. Fields that are set will be updated.
"""
input BillPaymentPatch {
  billPaymentId: Int
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: BigInt
  billId: BigInt
}

"""A connection to a list of `BillPayment` values."""
type BillPaymentsConnection {
  """A list of `BillPayment` objects."""
  nodes: [BillPayment]!

  """
  A list of edges which contains the `BillPayment` and cursor to aid in pagination.
  """
  edges: [BillPaymentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BillPayment` you could get from the connection."""
  totalCount: Int!
}

"""A `BillPayment` edge in the connection."""
type BillPaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BillPayment` at the end of the edge."""
  node: BillPayment
}

"""Methods to use when ordering `BillPayment`."""
enum BillPaymentsOrderBy {
  NATURAL
  BILL_PAYMENT_ID_ASC
  BILL_PAYMENT_ID_DESC
  DATE_ASC
  DATE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  PAYMENT_METHOD_ASC
  PAYMENT_METHOD_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  BILL_ID_ASC
  BILL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Bill` values."""
type BillsConnection {
  """A list of `Bill` objects."""
  nodes: [Bill]!

  """
  A list of edges which contains the `Bill` and cursor to aid in pagination.
  """
  edges: [BillsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Bill` you could get from the connection."""
  totalCount: Int!
}

"""A `Bill` edge in the connection."""
type BillsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Bill` at the end of the edge."""
  node: Bill
}

"""Methods to use when ordering `Bill`."""
enum BillsOrderBy {
  NATURAL
  BILL_ID_ASC
  BILL_ID_DESC
  STATUS_ASC
  STATUS_DESC
  DATE_ASC
  DATE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  PAYMENT_DUE_ASC
  PAYMENT_DUE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  VENDOR_ID_ASC
  VENDOR_ID_DESC
  PO_ID_ASC
  PO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum BillStatus {
  PAID
  NOT_PAID
}

type ChartOfAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  accountId: Int!
  accountNumber: String
  accountName: String
  description: String
  accountType: AccountT
  currency: String
  beginningBalance: BigFloat
  balance: BigFloat

  """Reads and enables pagination through a set of `Product`."""
  productsByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection!

  """Reads and enables pagination through a set of `Invoice`."""
  invoicesByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceCondition
  ): InvoicesConnection!

  """Reads and enables pagination through a set of `Receipt`."""
  receiptsByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReceiptCondition
  ): ReceiptsConnection!

  """Reads and enables pagination through a set of `PurchaseOrder`."""
  purchaseOrdersByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseOrderCondition
  ): PurchaseOrdersConnection!

  """Reads and enables pagination through a set of `Bill`."""
  billsByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillCondition
  ): BillsConnection!

  """Reads and enables pagination through a set of `BillPayment`."""
  billPaymentsByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillPaymentCondition
  ): BillPaymentsConnection!

  """Reads and enables pagination through a set of `JournalEntry`."""
  journalEntriesByAccountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JournalEntryCondition
  ): JournalEntriesConnection!
}

"""
A condition to be used against `ChartOfAccount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChartOfAccountCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: Int

  """Checks for equality with the object’s `accountNumber` field."""
  accountNumber: String

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `accountType` field."""
  accountType: AccountT

  """Checks for equality with the object’s `currency` field."""
  currency: String

  """Checks for equality with the object’s `beginningBalance` field."""
  beginningBalance: BigFloat

  """Checks for equality with the object’s `balance` field."""
  balance: BigFloat
}

"""An input for mutations affecting `ChartOfAccount`"""
input ChartOfAccountInput {
  accountId: Int
  accountNumber: String
  accountName: String
  description: String
  accountType: AccountT
  currency: String
  beginningBalance: BigFloat
  balance: BigFloat
}

"""
Represents an update to a `ChartOfAccount`. Fields that are set will be updated.
"""
input ChartOfAccountPatch {
  accountId: Int
  accountNumber: String
  accountName: String
  description: String
  accountType: AccountT
  currency: String
  beginningBalance: BigFloat
  balance: BigFloat
}

"""A connection to a list of `ChartOfAccount` values."""
type ChartOfAccountsConnection {
  """A list of `ChartOfAccount` objects."""
  nodes: [ChartOfAccount]!

  """
  A list of edges which contains the `ChartOfAccount` and cursor to aid in pagination.
  """
  edges: [ChartOfAccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChartOfAccount` you could get from the connection."""
  totalCount: Int!
}

"""A `ChartOfAccount` edge in the connection."""
type ChartOfAccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChartOfAccount` at the end of the edge."""
  node: ChartOfAccount
}

"""Methods to use when ordering `ChartOfAccount`."""
enum ChartOfAccountsOrderBy {
  NATURAL
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NUMBER_ASC
  ACCOUNT_NUMBER_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ACCOUNT_TYPE_ASC
  ACCOUNT_TYPE_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  BEGINNING_BALANCE_ASC
  BEGINNING_BALANCE_DESC
  BALANCE_ASC
  BALANCE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Bill` mutation."""
input CreateBillInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Bill` to be created by this mutation."""
  bill: BillInput!
}

"""The output of our create `Bill` mutation."""
type CreateBillPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Bill` that was created by this mutation."""
  bill: Bill

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Bill`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `Bill`."""
  vendorByVendorId: Vendor

  """Reads a single `PurchaseOrder` that is related to this `Bill`."""
  purchaseOrderByPoId: PurchaseOrder

  """An edge for our `Bill`. May be used by Relay 1."""
  billEdge(
    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillsEdge
}

"""All input for the create `BillPayment` mutation."""
input CreateBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BillPayment` to be created by this mutation."""
  billPayment: BillPaymentInput!
}

"""The output of our create `BillPayment` mutation."""
type CreateBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BillPayment` that was created by this mutation."""
  billPayment: BillPayment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `BillPayment`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Bill` that is related to this `BillPayment`."""
  billByBillId: Bill

  """An edge for our `BillPayment`. May be used by Relay 1."""
  billPaymentEdge(
    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillPaymentsEdge
}

"""All input for the create `ChartOfAccount` mutation."""
input CreateChartOfAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChartOfAccount` to be created by this mutation."""
  chartOfAccount: ChartOfAccountInput!
}

"""The output of our create `ChartOfAccount` mutation."""
type CreateChartOfAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChartOfAccount` that was created by this mutation."""
  chartOfAccount: ChartOfAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChartOfAccount`. May be used by Relay 1."""
  chartOfAccountEdge(
    """The method to use when ordering `ChartOfAccount`."""
    orderBy: [ChartOfAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChartOfAccountsEdge
}

"""All input for the create `Customer` mutation."""
input CreateCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Customer` to be created by this mutation."""
  customer: CustomerInput!
}

"""The output of our create `Customer` mutation."""
type CreateCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was created by this mutation."""
  customer: Customer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Region` that is related to this `Customer`."""
  regionByRegionId: Region

  """Reads a single `Dealer` that is related to this `Customer`."""
  dealerByDealerId: Dealer

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the create `Dealer` mutation."""
input CreateDealerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dealer` to be created by this mutation."""
  dealer: DealerInput!
}

"""The output of our create `Dealer` mutation."""
type CreateDealerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dealer` that was created by this mutation."""
  dealer: Dealer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Dealer`. May be used by Relay 1."""
  dealerEdge(
    """The method to use when ordering `Dealer`."""
    orderBy: [DealersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DealersEdge
}

"""All input for the create `Estimate` mutation."""
input CreateEstimateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Estimate` to be created by this mutation."""
  estimate: EstimateInput!
}

"""The output of our create `Estimate` mutation."""
type CreateEstimatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Estimate` that was created by this mutation."""
  estimate: Estimate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Estimate`."""
  customerByCustomerId: Customer

  """An edge for our `Estimate`. May be used by Relay 1."""
  estimateEdge(
    """The method to use when ordering `Estimate`."""
    orderBy: [EstimatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimatesEdge
}

"""All input for the create `EstimateProduct` mutation."""
input CreateEstimateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EstimateProduct` to be created by this mutation."""
  estimateProduct: EstimateProductInput!
}

"""The output of our create `EstimateProduct` mutation."""
type CreateEstimateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EstimateProduct` that was created by this mutation."""
  estimateProduct: EstimateProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Estimate` that is related to this `EstimateProduct`."""
  estimateByEstimateId: Estimate

  """Reads a single `Product` that is related to this `EstimateProduct`."""
  productByProductId: Product

  """An edge for our `EstimateProduct`. May be used by Relay 1."""
  estimateProductEdge(
    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimateProductsEdge
}

"""All input for the create `Invoice` mutation."""
input CreateInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Invoice` to be created by this mutation."""
  invoice: InvoiceInput!
}

"""The output of our create `Invoice` mutation."""
type CreateInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invoice` that was created by this mutation."""
  invoice: Invoice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Invoice`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Customer` that is related to this `Invoice`."""
  customerByCustomerId: Customer

  """Reads a single `Estimate` that is related to this `Invoice`."""
  estimateByEstimateId: Estimate

  """An edge for our `Invoice`. May be used by Relay 1."""
  invoiceEdge(
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoicesEdge
}

"""All input for the create `InvoiceProduct` mutation."""
input CreateInvoiceProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InvoiceProduct` to be created by this mutation."""
  invoiceProduct: InvoiceProductInput!
}

"""The output of our create `InvoiceProduct` mutation."""
type CreateInvoiceProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InvoiceProduct` that was created by this mutation."""
  invoiceProduct: InvoiceProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Invoice` that is related to this `InvoiceProduct`."""
  invoiceByInvoiceId: Invoice

  """Reads a single `Product` that is related to this `InvoiceProduct`."""
  productByProductId: Product

  """An edge for our `InvoiceProduct`. May be used by Relay 1."""
  invoiceProductEdge(
    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoiceProductsEdge
}

"""All input for the create `JournalEntry` mutation."""
input CreateJournalEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JournalEntry` to be created by this mutation."""
  journalEntry: JournalEntryInput!
}

"""The output of our create `JournalEntry` mutation."""
type CreateJournalEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JournalEntry` that was created by this mutation."""
  journalEntry: JournalEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Transaction` that is related to this `JournalEntry`."""
  transactionByTransactionId: Transaction

  """
  Reads a single `ChartOfAccount` that is related to this `JournalEntry`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """An edge for our `JournalEntry`. May be used by Relay 1."""
  journalEntryEdge(
    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JournalEntriesEdge
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Product`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Tax` that is related to this `Product`."""
  taxByTaxId: Tax

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the create `PurchaseOrder` mutation."""
input CreatePurchaseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PurchaseOrder` to be created by this mutation."""
  purchaseOrder: PurchaseOrderInput!
}

"""The output of our create `PurchaseOrder` mutation."""
type CreatePurchaseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PurchaseOrder` that was created by this mutation."""
  purchaseOrder: PurchaseOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChartOfAccount` that is related to this `PurchaseOrder`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `PurchaseOrder`."""
  vendorByVendorId: Vendor

  """An edge for our `PurchaseOrder`. May be used by Relay 1."""
  purchaseOrderEdge(
    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchaseOrdersEdge
}

"""All input for the create `Receipt` mutation."""
input CreateReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Receipt` to be created by this mutation."""
  receipt: ReceiptInput!
}

"""The output of our create `Receipt` mutation."""
type CreateReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Receipt` that was created by this mutation."""
  receipt: Receipt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Receipt`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Invoice` that is related to this `Receipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `Receipt`. May be used by Relay 1."""
  receiptEdge(
    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReceiptsEdge
}

"""All input for the create `Region` mutation."""
input CreateRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Region` to be created by this mutation."""
  region: RegionInput!
}

"""The output of our create `Region` mutation."""
type CreateRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Region` that was created by this mutation."""
  region: Region

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Region`. May be used by Relay 1."""
  regionEdge(
    """The method to use when ordering `Region`."""
    orderBy: [RegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegionsEdge
}

"""All input for the create `SubBillPayment` mutation."""
input CreateSubBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SubBillPayment` to be created by this mutation."""
  subBillPayment: SubBillPaymentInput!
}

"""The output of our create `SubBillPayment` mutation."""
type CreateSubBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubBillPayment` that was created by this mutation."""
  subBillPayment: SubBillPayment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `BillPayment` that is related to this `SubBillPayment`."""
  billPaymentByBillPaymentId: BillPayment

  """Reads a single `Bill` that is related to this `SubBillPayment`."""
  billByBillId: Bill

  """An edge for our `SubBillPayment`. May be used by Relay 1."""
  subBillPaymentEdge(
    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubBillPaymentsEdge
}

"""All input for the create `SubReceipt` mutation."""
input CreateSubReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SubReceipt` to be created by this mutation."""
  subReceipt: SubReceiptInput!
}

"""The output of our create `SubReceipt` mutation."""
type CreateSubReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubReceipt` that was created by this mutation."""
  subReceipt: SubReceipt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Receipt` that is related to this `SubReceipt`."""
  receiptByReceiptId: Receipt

  """Reads a single `Invoice` that is related to this `SubReceipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `SubReceipt`. May be used by Relay 1."""
  subReceiptEdge(
    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubReceiptsEdge
}

"""All input for the create `Tax` mutation."""
input CreateTaxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tax` to be created by this mutation."""
  tax: TaxInput!
}

"""The output of our create `Tax` mutation."""
type CreateTaxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tax` that was created by this mutation."""
  tax: Tax

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tax`. May be used by Relay 1."""
  taxEdge(
    """The method to use when ordering `Tax`."""
    orderBy: [TaxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxesEdge
}

"""All input for the create `Transaction` mutation."""
input CreateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Transaction` to be created by this mutation."""
  transaction: TransactionInput!
}

"""The output of our create `Transaction` mutation."""
type CreateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was created by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the create `Vendor` mutation."""
input CreateVendorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Vendor` to be created by this mutation."""
  vendor: VendorInput!
}

"""The output of our create `Vendor` mutation."""
type CreateVendorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Vendor` that was created by this mutation."""
  vendor: Vendor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Vendor`. May be used by Relay 1."""
  vendorEdge(
    """The method to use when ordering `Vendor`."""
    orderBy: [VendorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VendorsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

type Customer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  customerId: Int!
  name: String
  address: String
  regionId: Int
  phone: String
  note: String
  dealerId: Int!
  customerCode: String

  """Reads a single `Region` that is related to this `Customer`."""
  regionByRegionId: Region

  """Reads a single `Dealer` that is related to this `Customer`."""
  dealerByDealerId: Dealer

  """Reads and enables pagination through a set of `Estimate`."""
  estimatesByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Estimate`."""
    orderBy: [EstimatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimateCondition
  ): EstimatesConnection!

  """Reads and enables pagination through a set of `Invoice`."""
  invoicesByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceCondition
  ): InvoicesConnection!
}

"""
A condition to be used against `Customer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CustomerCondition {
  """Checks for equality with the object’s `customerId` field."""
  customerId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `regionId` field."""
  regionId: Int

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `dealerId` field."""
  dealerId: Int

  """Checks for equality with the object’s `customerCode` field."""
  customerCode: String
}

"""An input for mutations affecting `Customer`"""
input CustomerInput {
  customerId: Int
  name: String
  address: String
  regionId: Int
  phone: String
  note: String
  dealerId: Int!
  customerCode: String
}

"""
Represents an update to a `Customer`. Fields that are set will be updated.
"""
input CustomerPatch {
  customerId: Int
  name: String
  address: String
  regionId: Int
  phone: String
  note: String
  dealerId: Int
  customerCode: String
}

"""A connection to a list of `Customer` values."""
type CustomersConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!

  """
  A list of edges which contains the `Customer` and cursor to aid in pagination.
  """
  edges: [CustomersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection."""
type CustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Customer` at the end of the edge."""
  node: Customer
}

"""Methods to use when ordering `Customer`."""
enum CustomersOrderBy {
  NATURAL
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  REGION_ID_ASC
  REGION_ID_DESC
  PHONE_ASC
  PHONE_DESC
  NOTE_ASC
  NOTE_DESC
  DEALER_ID_ASC
  DEALER_ID_DESC
  CUSTOMER_CODE_ASC
  CUSTOMER_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The day, does not include a time."""
scalar Date

type Dealer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  dealerId: Int!
  name: String
  address: String
  phone: String

  """Reads and enables pagination through a set of `Customer`."""
  customersByDealerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CustomerCondition
  ): CustomersConnection!
}

"""
A condition to be used against `Dealer` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DealerCondition {
  """Checks for equality with the object’s `dealerId` field."""
  dealerId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `phone` field."""
  phone: String
}

"""An input for mutations affecting `Dealer`"""
input DealerInput {
  dealerId: Int
  name: String
  address: String
  phone: String
}

"""
Represents an update to a `Dealer`. Fields that are set will be updated.
"""
input DealerPatch {
  dealerId: Int
  name: String
  address: String
  phone: String
}

"""A connection to a list of `Dealer` values."""
type DealersConnection {
  """A list of `Dealer` objects."""
  nodes: [Dealer]!

  """
  A list of edges which contains the `Dealer` and cursor to aid in pagination.
  """
  edges: [DealersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dealer` you could get from the connection."""
  totalCount: Int!
}

"""A `Dealer` edge in the connection."""
type DealersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dealer` at the end of the edge."""
  node: Dealer
}

"""Methods to use when ordering `Dealer`."""
enum DealersOrderBy {
  NATURAL
  DEALER_ID_ASC
  DEALER_ID_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PHONE_ASC
  PHONE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `deleteBillByBillId` mutation."""
input DeleteBillByBillIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  billId: Int!
}

"""All input for the `deleteBill` mutation."""
input DeleteBillInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Bill` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Bill` mutation."""
type DeleteBillPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Bill` that was deleted by this mutation."""
  bill: Bill
  deletedBillId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Bill`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `Bill`."""
  vendorByVendorId: Vendor

  """Reads a single `PurchaseOrder` that is related to this `Bill`."""
  purchaseOrderByPoId: PurchaseOrder

  """An edge for our `Bill`. May be used by Relay 1."""
  billEdge(
    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillsEdge
}

"""All input for the `deleteBillPaymentByBillPaymentId` mutation."""
input DeleteBillPaymentByBillPaymentIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  billPaymentId: Int!
}

"""All input for the `deleteBillPayment` mutation."""
input DeleteBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BillPayment` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BillPayment` mutation."""
type DeleteBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BillPayment` that was deleted by this mutation."""
  billPayment: BillPayment
  deletedBillPaymentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `BillPayment`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Bill` that is related to this `BillPayment`."""
  billByBillId: Bill

  """An edge for our `BillPayment`. May be used by Relay 1."""
  billPaymentEdge(
    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillPaymentsEdge
}

"""All input for the `deleteChartOfAccountByAccountId` mutation."""
input DeleteChartOfAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: Int!
}

"""All input for the `deleteChartOfAccount` mutation."""
input DeleteChartOfAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChartOfAccount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChartOfAccount` mutation."""
type DeleteChartOfAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChartOfAccount` that was deleted by this mutation."""
  chartOfAccount: ChartOfAccount
  deletedChartOfAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChartOfAccount`. May be used by Relay 1."""
  chartOfAccountEdge(
    """The method to use when ordering `ChartOfAccount`."""
    orderBy: [ChartOfAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChartOfAccountsEdge
}

"""All input for the `deleteCustomerByCustomerId` mutation."""
input DeleteCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  customerId: Int!
}

"""All input for the `deleteCustomer` mutation."""
input DeleteCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Customer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Customer` mutation."""
type DeleteCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was deleted by this mutation."""
  customer: Customer
  deletedCustomerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Region` that is related to this `Customer`."""
  regionByRegionId: Region

  """Reads a single `Dealer` that is related to this `Customer`."""
  dealerByDealerId: Dealer

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the `deleteDealerByDealerId` mutation."""
input DeleteDealerByDealerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dealerId: Int!
}

"""All input for the `deleteDealer` mutation."""
input DeleteDealerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dealer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Dealer` mutation."""
type DeleteDealerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dealer` that was deleted by this mutation."""
  dealer: Dealer
  deletedDealerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Dealer`. May be used by Relay 1."""
  dealerEdge(
    """The method to use when ordering `Dealer`."""
    orderBy: [DealersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DealersEdge
}

"""All input for the `deleteEstimateByEstimateId` mutation."""
input DeleteEstimateByEstimateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  estimateId: Int!
}

"""All input for the `deleteEstimate` mutation."""
input DeleteEstimateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Estimate` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Estimate` mutation."""
type DeleteEstimatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Estimate` that was deleted by this mutation."""
  estimate: Estimate
  deletedEstimateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Estimate`."""
  customerByCustomerId: Customer

  """An edge for our `Estimate`. May be used by Relay 1."""
  estimateEdge(
    """The method to use when ordering `Estimate`."""
    orderBy: [EstimatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimatesEdge
}

"""
All input for the `deleteEstimateProductByEstimateIdAndProductId` mutation.
"""
input DeleteEstimateProductByEstimateIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  estimateId: Int!
  productId: Int!
}

"""All input for the `deleteEstimateProduct` mutation."""
input DeleteEstimateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EstimateProduct` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EstimateProduct` mutation."""
type DeleteEstimateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EstimateProduct` that was deleted by this mutation."""
  estimateProduct: EstimateProduct
  deletedEstimateProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Estimate` that is related to this `EstimateProduct`."""
  estimateByEstimateId: Estimate

  """Reads a single `Product` that is related to this `EstimateProduct`."""
  productByProductId: Product

  """An edge for our `EstimateProduct`. May be used by Relay 1."""
  estimateProductEdge(
    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimateProductsEdge
}

"""All input for the `deleteInvoiceByInvoiceId` mutation."""
input DeleteInvoiceByInvoiceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invoiceId: Int!
}

"""All input for the `deleteInvoice` mutation."""
input DeleteInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invoice` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Invoice` mutation."""
type DeleteInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invoice` that was deleted by this mutation."""
  invoice: Invoice
  deletedInvoiceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Invoice`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Customer` that is related to this `Invoice`."""
  customerByCustomerId: Customer

  """Reads a single `Estimate` that is related to this `Invoice`."""
  estimateByEstimateId: Estimate

  """An edge for our `Invoice`. May be used by Relay 1."""
  invoiceEdge(
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoicesEdge
}

"""
All input for the `deleteInvoiceProductByInvoiceIdAndProductId` mutation.
"""
input DeleteInvoiceProductByInvoiceIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invoiceId: Int!
  productId: Int!
}

"""All input for the `deleteInvoiceProduct` mutation."""
input DeleteInvoiceProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InvoiceProduct` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `InvoiceProduct` mutation."""
type DeleteInvoiceProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InvoiceProduct` that was deleted by this mutation."""
  invoiceProduct: InvoiceProduct
  deletedInvoiceProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Invoice` that is related to this `InvoiceProduct`."""
  invoiceByInvoiceId: Invoice

  """Reads a single `Product` that is related to this `InvoiceProduct`."""
  productByProductId: Product

  """An edge for our `InvoiceProduct`. May be used by Relay 1."""
  invoiceProductEdge(
    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoiceProductsEdge
}

"""
All input for the `deleteJournalEntryByTransactionIdAndAccountId` mutation.
"""
input DeleteJournalEntryByTransactionIdAndAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  transactionId: Int!
  accountId: Int!
}

"""All input for the `deleteJournalEntry` mutation."""
input DeleteJournalEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JournalEntry` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `JournalEntry` mutation."""
type DeleteJournalEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JournalEntry` that was deleted by this mutation."""
  journalEntry: JournalEntry
  deletedJournalEntryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Transaction` that is related to this `JournalEntry`."""
  transactionByTransactionId: Transaction

  """
  Reads a single `ChartOfAccount` that is related to this `JournalEntry`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """An edge for our `JournalEntry`. May be used by Relay 1."""
  journalEntryEdge(
    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JournalEntriesEdge
}

"""All input for the `deleteProductByProductId` mutation."""
input DeleteProductByProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  productId: Int!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Product`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Tax` that is related to this `Product`."""
  taxByTaxId: Tax

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `deletePurchaseOrderByPoId` mutation."""
input DeletePurchaseOrderByPoIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  poId: Int!
}

"""All input for the `deletePurchaseOrder` mutation."""
input DeletePurchaseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PurchaseOrder` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PurchaseOrder` mutation."""
type DeletePurchaseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PurchaseOrder` that was deleted by this mutation."""
  purchaseOrder: PurchaseOrder
  deletedPurchaseOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChartOfAccount` that is related to this `PurchaseOrder`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `PurchaseOrder`."""
  vendorByVendorId: Vendor

  """An edge for our `PurchaseOrder`. May be used by Relay 1."""
  purchaseOrderEdge(
    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchaseOrdersEdge
}

"""All input for the `deleteReceiptByReceiptId` mutation."""
input DeleteReceiptByReceiptIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  receiptId: Int!
}

"""All input for the `deleteReceipt` mutation."""
input DeleteReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Receipt` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Receipt` mutation."""
type DeleteReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Receipt` that was deleted by this mutation."""
  receipt: Receipt
  deletedReceiptId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Receipt`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Invoice` that is related to this `Receipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `Receipt`. May be used by Relay 1."""
  receiptEdge(
    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReceiptsEdge
}

"""All input for the `deleteRegionByRegionId` mutation."""
input DeleteRegionByRegionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  regionId: Int!
}

"""All input for the `deleteRegion` mutation."""
input DeleteRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Region` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Region` mutation."""
type DeleteRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Region` that was deleted by this mutation."""
  region: Region
  deletedRegionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Region`. May be used by Relay 1."""
  regionEdge(
    """The method to use when ordering `Region`."""
    orderBy: [RegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegionsEdge
}

"""All input for the `deleteSubBillPaymentBySubBillPaymentId` mutation."""
input DeleteSubBillPaymentBySubBillPaymentIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  subBillPaymentId: Int!
}

"""All input for the `deleteSubBillPayment` mutation."""
input DeleteSubBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubBillPayment` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SubBillPayment` mutation."""
type DeleteSubBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubBillPayment` that was deleted by this mutation."""
  subBillPayment: SubBillPayment
  deletedSubBillPaymentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `BillPayment` that is related to this `SubBillPayment`."""
  billPaymentByBillPaymentId: BillPayment

  """Reads a single `Bill` that is related to this `SubBillPayment`."""
  billByBillId: Bill

  """An edge for our `SubBillPayment`. May be used by Relay 1."""
  subBillPaymentEdge(
    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubBillPaymentsEdge
}

"""All input for the `deleteSubReceiptBySubReceiptId` mutation."""
input DeleteSubReceiptBySubReceiptIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  subReceiptId: Int!
}

"""All input for the `deleteSubReceipt` mutation."""
input DeleteSubReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubReceipt` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SubReceipt` mutation."""
type DeleteSubReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubReceipt` that was deleted by this mutation."""
  subReceipt: SubReceipt
  deletedSubReceiptId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Receipt` that is related to this `SubReceipt`."""
  receiptByReceiptId: Receipt

  """Reads a single `Invoice` that is related to this `SubReceipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `SubReceipt`. May be used by Relay 1."""
  subReceiptEdge(
    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubReceiptsEdge
}

"""All input for the `deleteTaxByTaxId` mutation."""
input DeleteTaxByTaxIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  taxId: Int!
}

"""All input for the `deleteTax` mutation."""
input DeleteTaxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tax` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Tax` mutation."""
type DeleteTaxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tax` that was deleted by this mutation."""
  tax: Tax
  deletedTaxId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tax`. May be used by Relay 1."""
  taxEdge(
    """The method to use when ordering `Tax`."""
    orderBy: [TaxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxesEdge
}

"""All input for the `deleteTransactionByTransactionId` mutation."""
input DeleteTransactionByTransactionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  transactionId: Int!
}

"""All input for the `deleteTransaction` mutation."""
input DeleteTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Transaction` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Transaction` mutation."""
type DeleteTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was deleted by this mutation."""
  transaction: Transaction
  deletedTransactionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the `deleteVendorByVendorId` mutation."""
input DeleteVendorByVendorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vendorId: Int!
}

"""All input for the `deleteVendor` mutation."""
input DeleteVendorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Vendor` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Vendor` mutation."""
type DeleteVendorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Vendor` that was deleted by this mutation."""
  vendor: Vendor
  deletedVendorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Vendor`. May be used by Relay 1."""
  vendorEdge(
    """The method to use when ordering `Vendor`."""
    orderBy: [VendorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VendorsEdge
}

type Estimate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  estimateId: Int!
  status: EstimateStatus
  date: Date
  memo: String
  customerId: Int

  """Reads a single `Customer` that is related to this `Estimate`."""
  customerByCustomerId: Customer

  """Reads and enables pagination through a set of `EstimateProduct`."""
  estimateProductsByEstimateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimateProductCondition
  ): EstimateProductsConnection!

  """Reads and enables pagination through a set of `Invoice`."""
  invoicesByEstimateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceCondition
  ): InvoicesConnection!
}

"""
A condition to be used against `Estimate` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EstimateCondition {
  """Checks for equality with the object’s `estimateId` field."""
  estimateId: Int

  """Checks for equality with the object’s `status` field."""
  status: EstimateStatus

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int
}

"""An input for mutations affecting `Estimate`"""
input EstimateInput {
  estimateId: Int
  status: EstimateStatus
  date: Date
  memo: String
  customerId: Int
}

"""
Represents an update to a `Estimate`. Fields that are set will be updated.
"""
input EstimatePatch {
  estimateId: Int
  status: EstimateStatus
  date: Date
  memo: String
  customerId: Int
}

type EstimateProduct implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  estimateId: Int!
  productId: Int!
  quantity: Int
  estimatePrice: Int

  """Reads a single `Estimate` that is related to this `EstimateProduct`."""
  estimateByEstimateId: Estimate

  """Reads a single `Product` that is related to this `EstimateProduct`."""
  productByProductId: Product
}

"""
A condition to be used against `EstimateProduct` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EstimateProductCondition {
  """Checks for equality with the object’s `estimateId` field."""
  estimateId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `estimatePrice` field."""
  estimatePrice: Int
}

"""An input for mutations affecting `EstimateProduct`"""
input EstimateProductInput {
  estimateId: Int!
  productId: Int!
  quantity: Int
  estimatePrice: Int
}

"""
Represents an update to a `EstimateProduct`. Fields that are set will be updated.
"""
input EstimateProductPatch {
  estimateId: Int
  productId: Int
  quantity: Int
  estimatePrice: Int
}

"""A connection to a list of `EstimateProduct` values."""
type EstimateProductsConnection {
  """A list of `EstimateProduct` objects."""
  nodes: [EstimateProduct]!

  """
  A list of edges which contains the `EstimateProduct` and cursor to aid in pagination.
  """
  edges: [EstimateProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EstimateProduct` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EstimateProduct` edge in the connection."""
type EstimateProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EstimateProduct` at the end of the edge."""
  node: EstimateProduct
}

"""Methods to use when ordering `EstimateProduct`."""
enum EstimateProductsOrderBy {
  NATURAL
  ESTIMATE_ID_ASC
  ESTIMATE_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  ESTIMATE_PRICE_ASC
  ESTIMATE_PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Estimate` values."""
type EstimatesConnection {
  """A list of `Estimate` objects."""
  nodes: [Estimate]!

  """
  A list of edges which contains the `Estimate` and cursor to aid in pagination.
  """
  edges: [EstimatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Estimate` you could get from the connection."""
  totalCount: Int!
}

"""A `Estimate` edge in the connection."""
type EstimatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Estimate` at the end of the edge."""
  node: Estimate
}

"""Methods to use when ordering `Estimate`."""
enum EstimatesOrderBy {
  NATURAL
  ESTIMATE_ID_ASC
  ESTIMATE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  DATE_ASC
  DATE_DESC
  MEMO_ASC
  MEMO_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum EstimateStatus {
  INVOICED
  NOT_INVOICED
}

type Invoice implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  invoiceId: Int!
  status: InvoiceStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: Int
  customerId: Int
  estimateId: Int

  """Reads a single `ChartOfAccount` that is related to this `Invoice`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Customer` that is related to this `Invoice`."""
  customerByCustomerId: Customer

  """Reads a single `Estimate` that is related to this `Invoice`."""
  estimateByEstimateId: Estimate

  """Reads and enables pagination through a set of `InvoiceProduct`."""
  invoiceProductsByInvoiceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceProductCondition
  ): InvoiceProductsConnection!

  """Reads and enables pagination through a set of `Receipt`."""
  receiptsByInvoiceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReceiptCondition
  ): ReceiptsConnection!

  """Reads and enables pagination through a set of `SubReceipt`."""
  subReceiptsByInvoiceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubReceiptCondition
  ): SubReceiptsConnection!
}

"""
A condition to be used against `Invoice` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InvoiceCondition {
  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int

  """Checks for equality with the object’s `status` field."""
  status: InvoiceStatus

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `paymentDue` field."""
  paymentDue: Date

  """Checks for equality with the object’s `accountId` field."""
  accountId: Int

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int

  """Checks for equality with the object’s `estimateId` field."""
  estimateId: Int
}

"""An input for mutations affecting `Invoice`"""
input InvoiceInput {
  invoiceId: Int
  status: InvoiceStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: Int
  customerId: Int
  estimateId: Int
}

"""
Represents an update to a `Invoice`. Fields that are set will be updated.
"""
input InvoicePatch {
  invoiceId: Int
  status: InvoiceStatus
  date: Date
  amount: BigFloat
  memo: String
  paymentDue: Date
  accountId: Int
  customerId: Int
  estimateId: Int
}

type InvoiceProduct implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  invoiceId: Int!
  productId: Int!
  quantity: Int
  invoicePrice: Int

  """Reads a single `Invoice` that is related to this `InvoiceProduct`."""
  invoiceByInvoiceId: Invoice

  """Reads a single `Product` that is related to this `InvoiceProduct`."""
  productByProductId: Product
}

"""
A condition to be used against `InvoiceProduct` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InvoiceProductCondition {
  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `invoicePrice` field."""
  invoicePrice: Int
}

"""An input for mutations affecting `InvoiceProduct`"""
input InvoiceProductInput {
  invoiceId: Int!
  productId: Int!
  quantity: Int
  invoicePrice: Int
}

"""
Represents an update to a `InvoiceProduct`. Fields that are set will be updated.
"""
input InvoiceProductPatch {
  invoiceId: Int
  productId: Int
  quantity: Int
  invoicePrice: Int
}

"""A connection to a list of `InvoiceProduct` values."""
type InvoiceProductsConnection {
  """A list of `InvoiceProduct` objects."""
  nodes: [InvoiceProduct]!

  """
  A list of edges which contains the `InvoiceProduct` and cursor to aid in pagination.
  """
  edges: [InvoiceProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `InvoiceProduct` you could get from the connection."""
  totalCount: Int!
}

"""A `InvoiceProduct` edge in the connection."""
type InvoiceProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InvoiceProduct` at the end of the edge."""
  node: InvoiceProduct
}

"""Methods to use when ordering `InvoiceProduct`."""
enum InvoiceProductsOrderBy {
  NATURAL
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  INVOICE_PRICE_ASC
  INVOICE_PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Invoice` values."""
type InvoicesConnection {
  """A list of `Invoice` objects."""
  nodes: [Invoice]!

  """
  A list of edges which contains the `Invoice` and cursor to aid in pagination.
  """
  edges: [InvoicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Invoice` you could get from the connection."""
  totalCount: Int!
}

"""A `Invoice` edge in the connection."""
type InvoicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Invoice` at the end of the edge."""
  node: Invoice
}

"""Methods to use when ordering `Invoice`."""
enum InvoicesOrderBy {
  NATURAL
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  DATE_ASC
  DATE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  PAYMENT_DUE_ASC
  PAYMENT_DUE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  ESTIMATE_ID_ASC
  ESTIMATE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum InvoiceStatus {
  PAID
  NOT_PAID
}

"""A connection to a list of `JournalEntry` values."""
type JournalEntriesConnection {
  """A list of `JournalEntry` objects."""
  nodes: [JournalEntry]!

  """
  A list of edges which contains the `JournalEntry` and cursor to aid in pagination.
  """
  edges: [JournalEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `JournalEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `JournalEntry` edge in the connection."""
type JournalEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JournalEntry` at the end of the edge."""
  node: JournalEntry
}

"""Methods to use when ordering `JournalEntry`."""
enum JournalEntriesOrderBy {
  NATURAL
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type JournalEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  transactionId: Int!
  accountId: Int!

  """Reads a single `Transaction` that is related to this `JournalEntry`."""
  transactionByTransactionId: Transaction

  """
  Reads a single `ChartOfAccount` that is related to this `JournalEntry`.
  """
  chartOfAccountByAccountId: ChartOfAccount
}

"""
A condition to be used against `JournalEntry` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input JournalEntryCondition {
  """Checks for equality with the object’s `transactionId` field."""
  transactionId: Int

  """Checks for equality with the object’s `accountId` field."""
  accountId: Int
}

"""An input for mutations affecting `JournalEntry`"""
input JournalEntryInput {
  transactionId: Int!
  accountId: Int!
}

"""
Represents an update to a `JournalEntry`. Fields that are set will be updated.
"""
input JournalEntryPatch {
  transactionId: Int
  accountId: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Bill`."""
  createBill(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBillInput!
  ): CreateBillPayload

  """Creates a single `BillPayment`."""
  createBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBillPaymentInput!
  ): CreateBillPaymentPayload

  """Creates a single `ChartOfAccount`."""
  createChartOfAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChartOfAccountInput!
  ): CreateChartOfAccountPayload

  """Creates a single `Customer`."""
  createCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCustomerInput!
  ): CreateCustomerPayload

  """Creates a single `Dealer`."""
  createDealer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDealerInput!
  ): CreateDealerPayload

  """Creates a single `Estimate`."""
  createEstimate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEstimateInput!
  ): CreateEstimatePayload

  """Creates a single `EstimateProduct`."""
  createEstimateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEstimateProductInput!
  ): CreateEstimateProductPayload

  """Creates a single `Invoice`."""
  createInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInvoiceInput!
  ): CreateInvoicePayload

  """Creates a single `InvoiceProduct`."""
  createInvoiceProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInvoiceProductInput!
  ): CreateInvoiceProductPayload

  """Creates a single `JournalEntry`."""
  createJournalEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJournalEntryInput!
  ): CreateJournalEntryPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `PurchaseOrder`."""
  createPurchaseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePurchaseOrderInput!
  ): CreatePurchaseOrderPayload

  """Creates a single `Receipt`."""
  createReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReceiptInput!
  ): CreateReceiptPayload

  """Creates a single `Region`."""
  createRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRegionInput!
  ): CreateRegionPayload

  """Creates a single `SubBillPayment`."""
  createSubBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubBillPaymentInput!
  ): CreateSubBillPaymentPayload

  """Creates a single `SubReceipt`."""
  createSubReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubReceiptInput!
  ): CreateSubReceiptPayload

  """Creates a single `Tax`."""
  createTax(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaxInput!
  ): CreateTaxPayload

  """Creates a single `Transaction`."""
  createTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTransactionInput!
  ): CreateTransactionPayload

  """Creates a single `Vendor`."""
  createVendor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVendorInput!
  ): CreateVendorPayload

  """Updates a single `Bill` using its globally unique id and a patch."""
  updateBill(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBillInput!
  ): UpdateBillPayload

  """Updates a single `Bill` using a unique key and a patch."""
  updateBillByBillId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBillByBillIdInput!
  ): UpdateBillPayload

  """
  Updates a single `BillPayment` using its globally unique id and a patch.
  """
  updateBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBillPaymentInput!
  ): UpdateBillPaymentPayload

  """Updates a single `BillPayment` using a unique key and a patch."""
  updateBillPaymentByBillPaymentId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBillPaymentByBillPaymentIdInput!
  ): UpdateBillPaymentPayload

  """
  Updates a single `ChartOfAccount` using its globally unique id and a patch.
  """
  updateChartOfAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChartOfAccountInput!
  ): UpdateChartOfAccountPayload

  """Updates a single `ChartOfAccount` using a unique key and a patch."""
  updateChartOfAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChartOfAccountByAccountIdInput!
  ): UpdateChartOfAccountPayload

  """Updates a single `Customer` using its globally unique id and a patch."""
  updateCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCustomerInput!
  ): UpdateCustomerPayload

  """Updates a single `Customer` using a unique key and a patch."""
  updateCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCustomerByCustomerIdInput!
  ): UpdateCustomerPayload

  """Updates a single `Dealer` using its globally unique id and a patch."""
  updateDealer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDealerInput!
  ): UpdateDealerPayload

  """Updates a single `Dealer` using a unique key and a patch."""
  updateDealerByDealerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDealerByDealerIdInput!
  ): UpdateDealerPayload

  """Updates a single `Estimate` using its globally unique id and a patch."""
  updateEstimate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEstimateInput!
  ): UpdateEstimatePayload

  """Updates a single `Estimate` using a unique key and a patch."""
  updateEstimateByEstimateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEstimateByEstimateIdInput!
  ): UpdateEstimatePayload

  """
  Updates a single `EstimateProduct` using its globally unique id and a patch.
  """
  updateEstimateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEstimateProductInput!
  ): UpdateEstimateProductPayload

  """Updates a single `EstimateProduct` using a unique key and a patch."""
  updateEstimateProductByEstimateIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEstimateProductByEstimateIdAndProductIdInput!
  ): UpdateEstimateProductPayload

  """Updates a single `Invoice` using its globally unique id and a patch."""
  updateInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvoiceInput!
  ): UpdateInvoicePayload

  """Updates a single `Invoice` using a unique key and a patch."""
  updateInvoiceByInvoiceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvoiceByInvoiceIdInput!
  ): UpdateInvoicePayload

  """
  Updates a single `InvoiceProduct` using its globally unique id and a patch.
  """
  updateInvoiceProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvoiceProductInput!
  ): UpdateInvoiceProductPayload

  """Updates a single `InvoiceProduct` using a unique key and a patch."""
  updateInvoiceProductByInvoiceIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvoiceProductByInvoiceIdAndProductIdInput!
  ): UpdateInvoiceProductPayload

  """
  Updates a single `JournalEntry` using its globally unique id and a patch.
  """
  updateJournalEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJournalEntryInput!
  ): UpdateJournalEntryPayload

  """Updates a single `JournalEntry` using a unique key and a patch."""
  updateJournalEntryByTransactionIdAndAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJournalEntryByTransactionIdAndAccountIdInput!
  ): UpdateJournalEntryPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByProductIdInput!
  ): UpdateProductPayload

  """
  Updates a single `PurchaseOrder` using its globally unique id and a patch.
  """
  updatePurchaseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePurchaseOrderInput!
  ): UpdatePurchaseOrderPayload

  """Updates a single `PurchaseOrder` using a unique key and a patch."""
  updatePurchaseOrderByPoId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePurchaseOrderByPoIdInput!
  ): UpdatePurchaseOrderPayload

  """Updates a single `Receipt` using its globally unique id and a patch."""
  updateReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReceiptInput!
  ): UpdateReceiptPayload

  """Updates a single `Receipt` using a unique key and a patch."""
  updateReceiptByReceiptId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReceiptByReceiptIdInput!
  ): UpdateReceiptPayload

  """Updates a single `Region` using its globally unique id and a patch."""
  updateRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegionInput!
  ): UpdateRegionPayload

  """Updates a single `Region` using a unique key and a patch."""
  updateRegionByRegionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegionByRegionIdInput!
  ): UpdateRegionPayload

  """
  Updates a single `SubBillPayment` using its globally unique id and a patch.
  """
  updateSubBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubBillPaymentInput!
  ): UpdateSubBillPaymentPayload

  """Updates a single `SubBillPayment` using a unique key and a patch."""
  updateSubBillPaymentBySubBillPaymentId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubBillPaymentBySubBillPaymentIdInput!
  ): UpdateSubBillPaymentPayload

  """
  Updates a single `SubReceipt` using its globally unique id and a patch.
  """
  updateSubReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubReceiptInput!
  ): UpdateSubReceiptPayload

  """Updates a single `SubReceipt` using a unique key and a patch."""
  updateSubReceiptBySubReceiptId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubReceiptBySubReceiptIdInput!
  ): UpdateSubReceiptPayload

  """Updates a single `Tax` using its globally unique id and a patch."""
  updateTax(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxInput!
  ): UpdateTaxPayload

  """Updates a single `Tax` using a unique key and a patch."""
  updateTaxByTaxId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxByTaxIdInput!
  ): UpdateTaxPayload

  """
  Updates a single `Transaction` using its globally unique id and a patch.
  """
  updateTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionInput!
  ): UpdateTransactionPayload

  """Updates a single `Transaction` using a unique key and a patch."""
  updateTransactionByTransactionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionByTransactionIdInput!
  ): UpdateTransactionPayload

  """Updates a single `Vendor` using its globally unique id and a patch."""
  updateVendor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVendorInput!
  ): UpdateVendorPayload

  """Updates a single `Vendor` using a unique key and a patch."""
  updateVendorByVendorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVendorByVendorIdInput!
  ): UpdateVendorPayload

  """Deletes a single `Bill` using its globally unique id."""
  deleteBill(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBillInput!
  ): DeleteBillPayload

  """Deletes a single `Bill` using a unique key."""
  deleteBillByBillId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBillByBillIdInput!
  ): DeleteBillPayload

  """Deletes a single `BillPayment` using its globally unique id."""
  deleteBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBillPaymentInput!
  ): DeleteBillPaymentPayload

  """Deletes a single `BillPayment` using a unique key."""
  deleteBillPaymentByBillPaymentId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBillPaymentByBillPaymentIdInput!
  ): DeleteBillPaymentPayload

  """Deletes a single `ChartOfAccount` using its globally unique id."""
  deleteChartOfAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChartOfAccountInput!
  ): DeleteChartOfAccountPayload

  """Deletes a single `ChartOfAccount` using a unique key."""
  deleteChartOfAccountByAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChartOfAccountByAccountIdInput!
  ): DeleteChartOfAccountPayload

  """Deletes a single `Customer` using its globally unique id."""
  deleteCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCustomerInput!
  ): DeleteCustomerPayload

  """Deletes a single `Customer` using a unique key."""
  deleteCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCustomerByCustomerIdInput!
  ): DeleteCustomerPayload

  """Deletes a single `Dealer` using its globally unique id."""
  deleteDealer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDealerInput!
  ): DeleteDealerPayload

  """Deletes a single `Dealer` using a unique key."""
  deleteDealerByDealerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDealerByDealerIdInput!
  ): DeleteDealerPayload

  """Deletes a single `Estimate` using its globally unique id."""
  deleteEstimate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEstimateInput!
  ): DeleteEstimatePayload

  """Deletes a single `Estimate` using a unique key."""
  deleteEstimateByEstimateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEstimateByEstimateIdInput!
  ): DeleteEstimatePayload

  """Deletes a single `EstimateProduct` using its globally unique id."""
  deleteEstimateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEstimateProductInput!
  ): DeleteEstimateProductPayload

  """Deletes a single `EstimateProduct` using a unique key."""
  deleteEstimateProductByEstimateIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEstimateProductByEstimateIdAndProductIdInput!
  ): DeleteEstimateProductPayload

  """Deletes a single `Invoice` using its globally unique id."""
  deleteInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvoiceInput!
  ): DeleteInvoicePayload

  """Deletes a single `Invoice` using a unique key."""
  deleteInvoiceByInvoiceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvoiceByInvoiceIdInput!
  ): DeleteInvoicePayload

  """Deletes a single `InvoiceProduct` using its globally unique id."""
  deleteInvoiceProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvoiceProductInput!
  ): DeleteInvoiceProductPayload

  """Deletes a single `InvoiceProduct` using a unique key."""
  deleteInvoiceProductByInvoiceIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvoiceProductByInvoiceIdAndProductIdInput!
  ): DeleteInvoiceProductPayload

  """Deletes a single `JournalEntry` using its globally unique id."""
  deleteJournalEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJournalEntryInput!
  ): DeleteJournalEntryPayload

  """Deletes a single `JournalEntry` using a unique key."""
  deleteJournalEntryByTransactionIdAndAccountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJournalEntryByTransactionIdAndAccountIdInput!
  ): DeleteJournalEntryPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByProductIdInput!
  ): DeleteProductPayload

  """Deletes a single `PurchaseOrder` using its globally unique id."""
  deletePurchaseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePurchaseOrderInput!
  ): DeletePurchaseOrderPayload

  """Deletes a single `PurchaseOrder` using a unique key."""
  deletePurchaseOrderByPoId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePurchaseOrderByPoIdInput!
  ): DeletePurchaseOrderPayload

  """Deletes a single `Receipt` using its globally unique id."""
  deleteReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReceiptInput!
  ): DeleteReceiptPayload

  """Deletes a single `Receipt` using a unique key."""
  deleteReceiptByReceiptId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReceiptByReceiptIdInput!
  ): DeleteReceiptPayload

  """Deletes a single `Region` using its globally unique id."""
  deleteRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegionInput!
  ): DeleteRegionPayload

  """Deletes a single `Region` using a unique key."""
  deleteRegionByRegionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegionByRegionIdInput!
  ): DeleteRegionPayload

  """Deletes a single `SubBillPayment` using its globally unique id."""
  deleteSubBillPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubBillPaymentInput!
  ): DeleteSubBillPaymentPayload

  """Deletes a single `SubBillPayment` using a unique key."""
  deleteSubBillPaymentBySubBillPaymentId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubBillPaymentBySubBillPaymentIdInput!
  ): DeleteSubBillPaymentPayload

  """Deletes a single `SubReceipt` using its globally unique id."""
  deleteSubReceipt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubReceiptInput!
  ): DeleteSubReceiptPayload

  """Deletes a single `SubReceipt` using a unique key."""
  deleteSubReceiptBySubReceiptId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubReceiptBySubReceiptIdInput!
  ): DeleteSubReceiptPayload

  """Deletes a single `Tax` using its globally unique id."""
  deleteTax(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxInput!
  ): DeleteTaxPayload

  """Deletes a single `Tax` using a unique key."""
  deleteTaxByTaxId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxByTaxIdInput!
  ): DeleteTaxPayload

  """Deletes a single `Transaction` using its globally unique id."""
  deleteTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionInput!
  ): DeleteTransactionPayload

  """Deletes a single `Transaction` using a unique key."""
  deleteTransactionByTransactionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionByTransactionIdInput!
  ): DeleteTransactionPayload

  """Deletes a single `Vendor` using its globally unique id."""
  deleteVendor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVendorInput!
  ): DeleteVendorPayload

  """Deletes a single `Vendor` using a unique key."""
  deleteVendorByVendorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVendorByVendorIdInput!
  ): DeleteVendorPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

enum PoStatus {
  BILLED
  NOT_BILLED
}

type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  productId: Int!
  name: String
  description: String
  productPrice: BigFloat
  accountId: Int
  taxId: Int

  """Reads a single `ChartOfAccount` that is related to this `Product`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Tax` that is related to this `Product`."""
  taxByTaxId: Tax

  """Reads and enables pagination through a set of `EstimateProduct`."""
  estimateProductsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimateProductCondition
  ): EstimateProductsConnection!

  """Reads and enables pagination through a set of `InvoiceProduct`."""
  invoiceProductsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceProductCondition
  ): InvoiceProductsConnection!
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `productPrice` field."""
  productPrice: BigFloat

  """Checks for equality with the object’s `accountId` field."""
  accountId: Int

  """Checks for equality with the object’s `taxId` field."""
  taxId: Int
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  productId: Int
  name: String
  description: String
  productPrice: BigFloat
  accountId: Int
  taxId: Int
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  productId: Int
  name: String
  description: String
  productPrice: BigFloat
  accountId: Int
  taxId: Int
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRODUCT_PRICE_ASC
  PRODUCT_PRICE_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TAX_ID_ASC
  TAX_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PurchaseOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  poId: Int!
  status: PoStatus
  date: Date
  amount: BigFloat
  memo: String
  accountId: Int
  vendorId: Int

  """
  Reads a single `ChartOfAccount` that is related to this `PurchaseOrder`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `PurchaseOrder`."""
  vendorByVendorId: Vendor

  """Reads and enables pagination through a set of `Bill`."""
  billsByPoId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillCondition
  ): BillsConnection!
}

"""
A condition to be used against `PurchaseOrder` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PurchaseOrderCondition {
  """Checks for equality with the object’s `poId` field."""
  poId: Int

  """Checks for equality with the object’s `status` field."""
  status: PoStatus

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: Int

  """Checks for equality with the object’s `vendorId` field."""
  vendorId: Int
}

"""An input for mutations affecting `PurchaseOrder`"""
input PurchaseOrderInput {
  poId: Int
  status: PoStatus
  date: Date
  amount: BigFloat
  memo: String
  accountId: Int
  vendorId: Int
}

"""
Represents an update to a `PurchaseOrder`. Fields that are set will be updated.
"""
input PurchaseOrderPatch {
  poId: Int
  status: PoStatus
  date: Date
  amount: BigFloat
  memo: String
  accountId: Int
  vendorId: Int
}

"""A connection to a list of `PurchaseOrder` values."""
type PurchaseOrdersConnection {
  """A list of `PurchaseOrder` objects."""
  nodes: [PurchaseOrder]!

  """
  A list of edges which contains the `PurchaseOrder` and cursor to aid in pagination.
  """
  edges: [PurchaseOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PurchaseOrder` you could get from the connection."""
  totalCount: Int!
}

"""A `PurchaseOrder` edge in the connection."""
type PurchaseOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PurchaseOrder` at the end of the edge."""
  node: PurchaseOrder
}

"""Methods to use when ordering `PurchaseOrder`."""
enum PurchaseOrdersOrderBy {
  NATURAL
  PO_ID_ASC
  PO_ID_DESC
  STATUS_ASC
  STATUS_DESC
  DATE_ASC
  DATE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  VENDOR_ID_ASC
  VENDOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Bill`."""
  allBills(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillCondition
  ): BillsConnection

  """Reads and enables pagination through a set of `BillPayment`."""
  allBillPayments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillPaymentCondition
  ): BillPaymentsConnection

  """Reads and enables pagination through a set of `ChartOfAccount`."""
  allChartOfAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChartOfAccount`."""
    orderBy: [ChartOfAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChartOfAccountCondition
  ): ChartOfAccountsConnection

  """Reads and enables pagination through a set of `Customer`."""
  allCustomers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CustomerCondition
  ): CustomersConnection

  """Reads and enables pagination through a set of `Dealer`."""
  allDealers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dealer`."""
    orderBy: [DealersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DealerCondition
  ): DealersConnection

  """Reads and enables pagination through a set of `Estimate`."""
  allEstimates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Estimate`."""
    orderBy: [EstimatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimateCondition
  ): EstimatesConnection

  """Reads and enables pagination through a set of `EstimateProduct`."""
  allEstimateProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EstimateProductCondition
  ): EstimateProductsConnection

  """Reads and enables pagination through a set of `Invoice`."""
  allInvoices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceCondition
  ): InvoicesConnection

  """Reads and enables pagination through a set of `InvoiceProduct`."""
  allInvoiceProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceProductCondition
  ): InvoiceProductsConnection

  """Reads and enables pagination through a set of `JournalEntry`."""
  allJournalEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JournalEntryCondition
  ): JournalEntriesConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection

  """Reads and enables pagination through a set of `PurchaseOrder`."""
  allPurchaseOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseOrderCondition
  ): PurchaseOrdersConnection

  """Reads and enables pagination through a set of `Receipt`."""
  allReceipts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReceiptCondition
  ): ReceiptsConnection

  """Reads and enables pagination through a set of `Region`."""
  allRegions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Region`."""
    orderBy: [RegionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegionCondition
  ): RegionsConnection

  """Reads and enables pagination through a set of `SubBillPayment`."""
  allSubBillPayments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubBillPaymentCondition
  ): SubBillPaymentsConnection

  """Reads and enables pagination through a set of `SubReceipt`."""
  allSubReceipts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubReceiptCondition
  ): SubReceiptsConnection

  """Reads and enables pagination through a set of `Tax`."""
  allTaxes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tax`."""
    orderBy: [TaxesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaxCondition
  ): TaxesConnection

  """Reads and enables pagination through a set of `Transaction`."""
  allTransactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition
  ): TransactionsConnection

  """Reads and enables pagination through a set of `Vendor`."""
  allVendors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Vendor`."""
    orderBy: [VendorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VendorCondition
  ): VendorsConnection
  billByBillId(billId: Int!): Bill
  billPaymentByBillPaymentId(billPaymentId: Int!): BillPayment
  chartOfAccountByAccountId(accountId: Int!): ChartOfAccount
  customerByCustomerId(customerId: Int!): Customer
  dealerByDealerId(dealerId: Int!): Dealer
  estimateByEstimateId(estimateId: Int!): Estimate
  estimateProductByEstimateIdAndProductId(estimateId: Int!, productId: Int!): EstimateProduct
  invoiceByInvoiceId(invoiceId: Int!): Invoice
  invoiceProductByInvoiceIdAndProductId(invoiceId: Int!, productId: Int!): InvoiceProduct
  journalEntryByTransactionIdAndAccountId(transactionId: Int!, accountId: Int!): JournalEntry
  productByProductId(productId: Int!): Product
  purchaseOrderByPoId(poId: Int!): PurchaseOrder
  receiptByReceiptId(receiptId: Int!): Receipt
  regionByRegionId(regionId: Int!): Region
  subBillPaymentBySubBillPaymentId(subBillPaymentId: Int!): SubBillPayment
  subReceiptBySubReceiptId(subReceiptId: Int!): SubReceipt
  taxByTaxId(taxId: Int!): Tax
  transactionByTransactionId(transactionId: Int!): Transaction
  vendorByVendorId(vendorId: Int!): Vendor

  """Reads a single `Bill` using its globally unique `ID`."""
  bill(
    """The globally unique `ID` to be used in selecting a single `Bill`."""
    nodeId: ID!
  ): Bill

  """Reads a single `BillPayment` using its globally unique `ID`."""
  billPayment(
    """
    The globally unique `ID` to be used in selecting a single `BillPayment`.
    """
    nodeId: ID!
  ): BillPayment

  """Reads a single `ChartOfAccount` using its globally unique `ID`."""
  chartOfAccount(
    """
    The globally unique `ID` to be used in selecting a single `ChartOfAccount`.
    """
    nodeId: ID!
  ): ChartOfAccount

  """Reads a single `Customer` using its globally unique `ID`."""
  customer(
    """The globally unique `ID` to be used in selecting a single `Customer`."""
    nodeId: ID!
  ): Customer

  """Reads a single `Dealer` using its globally unique `ID`."""
  dealer(
    """The globally unique `ID` to be used in selecting a single `Dealer`."""
    nodeId: ID!
  ): Dealer

  """Reads a single `Estimate` using its globally unique `ID`."""
  estimate(
    """The globally unique `ID` to be used in selecting a single `Estimate`."""
    nodeId: ID!
  ): Estimate

  """Reads a single `EstimateProduct` using its globally unique `ID`."""
  estimateProduct(
    """
    The globally unique `ID` to be used in selecting a single `EstimateProduct`.
    """
    nodeId: ID!
  ): EstimateProduct

  """Reads a single `Invoice` using its globally unique `ID`."""
  invoice(
    """The globally unique `ID` to be used in selecting a single `Invoice`."""
    nodeId: ID!
  ): Invoice

  """Reads a single `InvoiceProduct` using its globally unique `ID`."""
  invoiceProduct(
    """
    The globally unique `ID` to be used in selecting a single `InvoiceProduct`.
    """
    nodeId: ID!
  ): InvoiceProduct

  """Reads a single `JournalEntry` using its globally unique `ID`."""
  journalEntry(
    """
    The globally unique `ID` to be used in selecting a single `JournalEntry`.
    """
    nodeId: ID!
  ): JournalEntry

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product

  """Reads a single `PurchaseOrder` using its globally unique `ID`."""
  purchaseOrder(
    """
    The globally unique `ID` to be used in selecting a single `PurchaseOrder`.
    """
    nodeId: ID!
  ): PurchaseOrder

  """Reads a single `Receipt` using its globally unique `ID`."""
  receipt(
    """The globally unique `ID` to be used in selecting a single `Receipt`."""
    nodeId: ID!
  ): Receipt

  """Reads a single `Region` using its globally unique `ID`."""
  region(
    """The globally unique `ID` to be used in selecting a single `Region`."""
    nodeId: ID!
  ): Region

  """Reads a single `SubBillPayment` using its globally unique `ID`."""
  subBillPayment(
    """
    The globally unique `ID` to be used in selecting a single `SubBillPayment`.
    """
    nodeId: ID!
  ): SubBillPayment

  """Reads a single `SubReceipt` using its globally unique `ID`."""
  subReceipt(
    """
    The globally unique `ID` to be used in selecting a single `SubReceipt`.
    """
    nodeId: ID!
  ): SubReceipt

  """Reads a single `Tax` using its globally unique `ID`."""
  tax(
    """The globally unique `ID` to be used in selecting a single `Tax`."""
    nodeId: ID!
  ): Tax

  """Reads a single `Transaction` using its globally unique `ID`."""
  transaction(
    """
    The globally unique `ID` to be used in selecting a single `Transaction`.
    """
    nodeId: ID!
  ): Transaction

  """Reads a single `Vendor` using its globally unique `ID`."""
  vendor(
    """The globally unique `ID` to be used in selecting a single `Vendor`."""
    nodeId: ID!
  ): Vendor
}

type Receipt implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  receiptId: Int!
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: Int
  invoiceId: Int

  """Reads a single `ChartOfAccount` that is related to this `Receipt`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Invoice` that is related to this `Receipt`."""
  invoiceByInvoiceId: Invoice

  """Reads and enables pagination through a set of `SubReceipt`."""
  subReceiptsByReceiptId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubReceiptCondition
  ): SubReceiptsConnection!
}

"""
A condition to be used against `Receipt` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReceiptCondition {
  """Checks for equality with the object’s `receiptId` field."""
  receiptId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `memo` field."""
  memo: String

  """Checks for equality with the object’s `paymentMethod` field."""
  paymentMethod: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: Int

  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int
}

"""An input for mutations affecting `Receipt`"""
input ReceiptInput {
  receiptId: Int
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: Int
  invoiceId: Int
}

"""
Represents an update to a `Receipt`. Fields that are set will be updated.
"""
input ReceiptPatch {
  receiptId: Int
  date: Date
  amount: BigFloat
  memo: String
  paymentMethod: String
  accountId: Int
  invoiceId: Int
}

"""A connection to a list of `Receipt` values."""
type ReceiptsConnection {
  """A list of `Receipt` objects."""
  nodes: [Receipt]!

  """
  A list of edges which contains the `Receipt` and cursor to aid in pagination.
  """
  edges: [ReceiptsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Receipt` you could get from the connection."""
  totalCount: Int!
}

"""A `Receipt` edge in the connection."""
type ReceiptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Receipt` at the end of the edge."""
  node: Receipt
}

"""Methods to use when ordering `Receipt`."""
enum ReceiptsOrderBy {
  NATURAL
  RECEIPT_ID_ASC
  RECEIPT_ID_DESC
  DATE_ASC
  DATE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  MEMO_ASC
  MEMO_DESC
  PAYMENT_METHOD_ASC
  PAYMENT_METHOD_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Region implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  regionId: Int!
  name: String!
  shippingAmount: Int

  """Reads and enables pagination through a set of `Customer`."""
  customersByRegionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CustomerCondition
  ): CustomersConnection!
}

"""
A condition to be used against `Region` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RegionCondition {
  """Checks for equality with the object’s `regionId` field."""
  regionId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `shippingAmount` field."""
  shippingAmount: Int
}

"""An input for mutations affecting `Region`"""
input RegionInput {
  regionId: Int
  name: String!
  shippingAmount: Int
}

"""
Represents an update to a `Region`. Fields that are set will be updated.
"""
input RegionPatch {
  regionId: Int
  name: String
  shippingAmount: Int
}

"""A connection to a list of `Region` values."""
type RegionsConnection {
  """A list of `Region` objects."""
  nodes: [Region]!

  """
  A list of edges which contains the `Region` and cursor to aid in pagination.
  """
  edges: [RegionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Region` you could get from the connection."""
  totalCount: Int!
}

"""A `Region` edge in the connection."""
type RegionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Region` at the end of the edge."""
  node: Region
}

"""Methods to use when ordering `Region`."""
enum RegionsOrderBy {
  NATURAL
  REGION_ID_ASC
  REGION_ID_DESC
  NAME_ASC
  NAME_DESC
  SHIPPING_AMOUNT_ASC
  SHIPPING_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SubBillPayment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  subBillPaymentId: Int!
  billPaymentId: Int
  billId: Int
  amount: BigFloat

  """Reads a single `BillPayment` that is related to this `SubBillPayment`."""
  billPaymentByBillPaymentId: BillPayment

  """Reads a single `Bill` that is related to this `SubBillPayment`."""
  billByBillId: Bill
}

"""
A condition to be used against `SubBillPayment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SubBillPaymentCondition {
  """Checks for equality with the object’s `subBillPaymentId` field."""
  subBillPaymentId: Int

  """Checks for equality with the object’s `billPaymentId` field."""
  billPaymentId: Int

  """Checks for equality with the object’s `billId` field."""
  billId: Int

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat
}

"""An input for mutations affecting `SubBillPayment`"""
input SubBillPaymentInput {
  subBillPaymentId: Int!
  billPaymentId: Int
  billId: Int
  amount: BigFloat
}

"""
Represents an update to a `SubBillPayment`. Fields that are set will be updated.
"""
input SubBillPaymentPatch {
  subBillPaymentId: Int
  billPaymentId: Int
  billId: Int
  amount: BigFloat
}

"""A connection to a list of `SubBillPayment` values."""
type SubBillPaymentsConnection {
  """A list of `SubBillPayment` objects."""
  nodes: [SubBillPayment]!

  """
  A list of edges which contains the `SubBillPayment` and cursor to aid in pagination.
  """
  edges: [SubBillPaymentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SubBillPayment` you could get from the connection."""
  totalCount: Int!
}

"""A `SubBillPayment` edge in the connection."""
type SubBillPaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SubBillPayment` at the end of the edge."""
  node: SubBillPayment
}

"""Methods to use when ordering `SubBillPayment`."""
enum SubBillPaymentsOrderBy {
  NATURAL
  SUB_BILL_PAYMENT_ID_ASC
  SUB_BILL_PAYMENT_ID_DESC
  BILL_PAYMENT_ID_ASC
  BILL_PAYMENT_ID_DESC
  BILL_ID_ASC
  BILL_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SubReceipt implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  subReceiptId: Int!
  receiptId: Int
  invoiceId: Int
  amount: BigFloat

  """Reads a single `Receipt` that is related to this `SubReceipt`."""
  receiptByReceiptId: Receipt

  """Reads a single `Invoice` that is related to this `SubReceipt`."""
  invoiceByInvoiceId: Invoice
}

"""
A condition to be used against `SubReceipt` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SubReceiptCondition {
  """Checks for equality with the object’s `subReceiptId` field."""
  subReceiptId: Int

  """Checks for equality with the object’s `receiptId` field."""
  receiptId: Int

  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat
}

"""An input for mutations affecting `SubReceipt`"""
input SubReceiptInput {
  subReceiptId: Int
  receiptId: Int
  invoiceId: Int
  amount: BigFloat
}

"""
Represents an update to a `SubReceipt`. Fields that are set will be updated.
"""
input SubReceiptPatch {
  subReceiptId: Int
  receiptId: Int
  invoiceId: Int
  amount: BigFloat
}

"""A connection to a list of `SubReceipt` values."""
type SubReceiptsConnection {
  """A list of `SubReceipt` objects."""
  nodes: [SubReceipt]!

  """
  A list of edges which contains the `SubReceipt` and cursor to aid in pagination.
  """
  edges: [SubReceiptsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SubReceipt` you could get from the connection."""
  totalCount: Int!
}

"""A `SubReceipt` edge in the connection."""
type SubReceiptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SubReceipt` at the end of the edge."""
  node: SubReceipt
}

"""Methods to use when ordering `SubReceipt`."""
enum SubReceiptsOrderBy {
  NATURAL
  SUB_RECEIPT_ID_ASC
  SUB_RECEIPT_ID_DESC
  RECEIPT_ID_ASC
  RECEIPT_ID_DESC
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tax implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  taxId: Int!
  taxCode: String
  taxName: String
  taxRate: BigFloat

  """Reads and enables pagination through a set of `Product`."""
  productsByTaxId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection!
}

"""
A condition to be used against `Tax` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaxCondition {
  """Checks for equality with the object’s `taxId` field."""
  taxId: Int

  """Checks for equality with the object’s `taxCode` field."""
  taxCode: String

  """Checks for equality with the object’s `taxName` field."""
  taxName: String

  """Checks for equality with the object’s `taxRate` field."""
  taxRate: BigFloat
}

"""A connection to a list of `Tax` values."""
type TaxesConnection {
  """A list of `Tax` objects."""
  nodes: [Tax]!

  """
  A list of edges which contains the `Tax` and cursor to aid in pagination.
  """
  edges: [TaxesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tax` you could get from the connection."""
  totalCount: Int!
}

"""A `Tax` edge in the connection."""
type TaxesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tax` at the end of the edge."""
  node: Tax
}

"""Methods to use when ordering `Tax`."""
enum TaxesOrderBy {
  NATURAL
  TAX_ID_ASC
  TAX_ID_DESC
  TAX_CODE_ASC
  TAX_CODE_DESC
  TAX_NAME_ASC
  TAX_NAME_DESC
  TAX_RATE_ASC
  TAX_RATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Tax`"""
input TaxInput {
  taxId: Int
  taxCode: String
  taxName: String
  taxRate: BigFloat
}

"""Represents an update to a `Tax`. Fields that are set will be updated."""
input TaxPatch {
  taxId: Int
  taxCode: String
  taxName: String
  taxRate: BigFloat
}

type Transaction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  transactionId: Int!
  date: Date
  transactionType: TransactionT
  amount: BigFloat

  """Reads and enables pagination through a set of `JournalEntry`."""
  journalEntriesByTransactionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JournalEntryCondition
  ): JournalEntriesConnection!
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `transactionId` field."""
  transactionId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `transactionType` field."""
  transactionType: TransactionT

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat
}

"""An input for mutations affecting `Transaction`"""
input TransactionInput {
  transactionId: Int
  date: Date
  transactionType: TransactionT
  amount: BigFloat
}

"""
Represents an update to a `Transaction`. Fields that are set will be updated.
"""
input TransactionPatch {
  transactionId: Int
  date: Date
  transactionType: TransactionT
  amount: BigFloat
}

"""A connection to a list of `Transaction` values."""
type TransactionsConnection {
  """A list of `Transaction` objects."""
  nodes: [Transaction]!

  """
  A list of edges which contains the `Transaction` and cursor to aid in pagination.
  """
  edges: [TransactionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transaction` you could get from the connection."""
  totalCount: Int!
}

"""A `Transaction` edge in the connection."""
type TransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transaction` at the end of the edge."""
  node: Transaction
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  NATURAL
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  DATE_ASC
  DATE_DESC
  TRANSACTION_TYPE_ASC
  TRANSACTION_TYPE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TransactionT {
  DEPOSIT
  WITHDRAWAL
}

"""All input for the `updateBillByBillId` mutation."""
input UpdateBillByBillIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Bill` being updated.
  """
  billPatch: BillPatch!
  billId: Int!
}

"""All input for the `updateBill` mutation."""
input UpdateBillInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Bill` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Bill` being updated.
  """
  billPatch: BillPatch!
}

"""The output of our update `Bill` mutation."""
type UpdateBillPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Bill` that was updated by this mutation."""
  bill: Bill

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Bill`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `Bill`."""
  vendorByVendorId: Vendor

  """Reads a single `PurchaseOrder` that is related to this `Bill`."""
  purchaseOrderByPoId: PurchaseOrder

  """An edge for our `Bill`. May be used by Relay 1."""
  billEdge(
    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillsEdge
}

"""All input for the `updateBillPaymentByBillPaymentId` mutation."""
input UpdateBillPaymentByBillPaymentIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BillPayment` being updated.
  """
  billPaymentPatch: BillPaymentPatch!
  billPaymentId: Int!
}

"""All input for the `updateBillPayment` mutation."""
input UpdateBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BillPayment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BillPayment` being updated.
  """
  billPaymentPatch: BillPaymentPatch!
}

"""The output of our update `BillPayment` mutation."""
type UpdateBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BillPayment` that was updated by this mutation."""
  billPayment: BillPayment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `BillPayment`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Bill` that is related to this `BillPayment`."""
  billByBillId: Bill

  """An edge for our `BillPayment`. May be used by Relay 1."""
  billPaymentEdge(
    """The method to use when ordering `BillPayment`."""
    orderBy: [BillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BillPaymentsEdge
}

"""All input for the `updateChartOfAccountByAccountId` mutation."""
input UpdateChartOfAccountByAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChartOfAccount` being updated.
  """
  chartOfAccountPatch: ChartOfAccountPatch!
  accountId: Int!
}

"""All input for the `updateChartOfAccount` mutation."""
input UpdateChartOfAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChartOfAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChartOfAccount` being updated.
  """
  chartOfAccountPatch: ChartOfAccountPatch!
}

"""The output of our update `ChartOfAccount` mutation."""
type UpdateChartOfAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChartOfAccount` that was updated by this mutation."""
  chartOfAccount: ChartOfAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChartOfAccount`. May be used by Relay 1."""
  chartOfAccountEdge(
    """The method to use when ordering `ChartOfAccount`."""
    orderBy: [ChartOfAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChartOfAccountsEdge
}

"""All input for the `updateCustomerByCustomerId` mutation."""
input UpdateCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Customer` being updated.
  """
  customerPatch: CustomerPatch!
  customerId: Int!
}

"""All input for the `updateCustomer` mutation."""
input UpdateCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Customer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Customer` being updated.
  """
  customerPatch: CustomerPatch!
}

"""The output of our update `Customer` mutation."""
type UpdateCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was updated by this mutation."""
  customer: Customer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Region` that is related to this `Customer`."""
  regionByRegionId: Region

  """Reads a single `Dealer` that is related to this `Customer`."""
  dealerByDealerId: Dealer

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the `updateDealerByDealerId` mutation."""
input UpdateDealerByDealerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Dealer` being updated.
  """
  dealerPatch: DealerPatch!
  dealerId: Int!
}

"""All input for the `updateDealer` mutation."""
input UpdateDealerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dealer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dealer` being updated.
  """
  dealerPatch: DealerPatch!
}

"""The output of our update `Dealer` mutation."""
type UpdateDealerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dealer` that was updated by this mutation."""
  dealer: Dealer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Dealer`. May be used by Relay 1."""
  dealerEdge(
    """The method to use when ordering `Dealer`."""
    orderBy: [DealersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DealersEdge
}

"""All input for the `updateEstimateByEstimateId` mutation."""
input UpdateEstimateByEstimateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Estimate` being updated.
  """
  estimatePatch: EstimatePatch!
  estimateId: Int!
}

"""All input for the `updateEstimate` mutation."""
input UpdateEstimateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Estimate` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Estimate` being updated.
  """
  estimatePatch: EstimatePatch!
}

"""The output of our update `Estimate` mutation."""
type UpdateEstimatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Estimate` that was updated by this mutation."""
  estimate: Estimate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Estimate`."""
  customerByCustomerId: Customer

  """An edge for our `Estimate`. May be used by Relay 1."""
  estimateEdge(
    """The method to use when ordering `Estimate`."""
    orderBy: [EstimatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimatesEdge
}

"""
All input for the `updateEstimateProductByEstimateIdAndProductId` mutation.
"""
input UpdateEstimateProductByEstimateIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EstimateProduct` being updated.
  """
  estimateProductPatch: EstimateProductPatch!
  estimateId: Int!
  productId: Int!
}

"""All input for the `updateEstimateProduct` mutation."""
input UpdateEstimateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EstimateProduct` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EstimateProduct` being updated.
  """
  estimateProductPatch: EstimateProductPatch!
}

"""The output of our update `EstimateProduct` mutation."""
type UpdateEstimateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EstimateProduct` that was updated by this mutation."""
  estimateProduct: EstimateProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Estimate` that is related to this `EstimateProduct`."""
  estimateByEstimateId: Estimate

  """Reads a single `Product` that is related to this `EstimateProduct`."""
  productByProductId: Product

  """An edge for our `EstimateProduct`. May be used by Relay 1."""
  estimateProductEdge(
    """The method to use when ordering `EstimateProduct`."""
    orderBy: [EstimateProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EstimateProductsEdge
}

"""All input for the `updateInvoiceByInvoiceId` mutation."""
input UpdateInvoiceByInvoiceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Invoice` being updated.
  """
  invoicePatch: InvoicePatch!
  invoiceId: Int!
}

"""All input for the `updateInvoice` mutation."""
input UpdateInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invoice` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Invoice` being updated.
  """
  invoicePatch: InvoicePatch!
}

"""The output of our update `Invoice` mutation."""
type UpdateInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invoice` that was updated by this mutation."""
  invoice: Invoice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Invoice`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Customer` that is related to this `Invoice`."""
  customerByCustomerId: Customer

  """Reads a single `Estimate` that is related to this `Invoice`."""
  estimateByEstimateId: Estimate

  """An edge for our `Invoice`. May be used by Relay 1."""
  invoiceEdge(
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoicesEdge
}

"""
All input for the `updateInvoiceProductByInvoiceIdAndProductId` mutation.
"""
input UpdateInvoiceProductByInvoiceIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InvoiceProduct` being updated.
  """
  invoiceProductPatch: InvoiceProductPatch!
  invoiceId: Int!
  productId: Int!
}

"""All input for the `updateInvoiceProduct` mutation."""
input UpdateInvoiceProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InvoiceProduct` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InvoiceProduct` being updated.
  """
  invoiceProductPatch: InvoiceProductPatch!
}

"""The output of our update `InvoiceProduct` mutation."""
type UpdateInvoiceProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InvoiceProduct` that was updated by this mutation."""
  invoiceProduct: InvoiceProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Invoice` that is related to this `InvoiceProduct`."""
  invoiceByInvoiceId: Invoice

  """Reads a single `Product` that is related to this `InvoiceProduct`."""
  productByProductId: Product

  """An edge for our `InvoiceProduct`. May be used by Relay 1."""
  invoiceProductEdge(
    """The method to use when ordering `InvoiceProduct`."""
    orderBy: [InvoiceProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvoiceProductsEdge
}

"""
All input for the `updateJournalEntryByTransactionIdAndAccountId` mutation.
"""
input UpdateJournalEntryByTransactionIdAndAccountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JournalEntry` being updated.
  """
  journalEntryPatch: JournalEntryPatch!
  transactionId: Int!
  accountId: Int!
}

"""All input for the `updateJournalEntry` mutation."""
input UpdateJournalEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JournalEntry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `JournalEntry` being updated.
  """
  journalEntryPatch: JournalEntryPatch!
}

"""The output of our update `JournalEntry` mutation."""
type UpdateJournalEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JournalEntry` that was updated by this mutation."""
  journalEntry: JournalEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Transaction` that is related to this `JournalEntry`."""
  transactionByTransactionId: Transaction

  """
  Reads a single `ChartOfAccount` that is related to this `JournalEntry`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """An edge for our `JournalEntry`. May be used by Relay 1."""
  journalEntryEdge(
    """The method to use when ordering `JournalEntry`."""
    orderBy: [JournalEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JournalEntriesEdge
}

"""All input for the `updateProductByProductId` mutation."""
input UpdateProductByProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
  productId: Int!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Product`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Tax` that is related to this `Product`."""
  taxByTaxId: Tax

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `updatePurchaseOrderByPoId` mutation."""
input UpdatePurchaseOrderByPoIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PurchaseOrder` being updated.
  """
  purchaseOrderPatch: PurchaseOrderPatch!
  poId: Int!
}

"""All input for the `updatePurchaseOrder` mutation."""
input UpdatePurchaseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PurchaseOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PurchaseOrder` being updated.
  """
  purchaseOrderPatch: PurchaseOrderPatch!
}

"""The output of our update `PurchaseOrder` mutation."""
type UpdatePurchaseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PurchaseOrder` that was updated by this mutation."""
  purchaseOrder: PurchaseOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChartOfAccount` that is related to this `PurchaseOrder`.
  """
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Vendor` that is related to this `PurchaseOrder`."""
  vendorByVendorId: Vendor

  """An edge for our `PurchaseOrder`. May be used by Relay 1."""
  purchaseOrderEdge(
    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchaseOrdersEdge
}

"""All input for the `updateReceiptByReceiptId` mutation."""
input UpdateReceiptByReceiptIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Receipt` being updated.
  """
  receiptPatch: ReceiptPatch!
  receiptId: Int!
}

"""All input for the `updateReceipt` mutation."""
input UpdateReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Receipt` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Receipt` being updated.
  """
  receiptPatch: ReceiptPatch!
}

"""The output of our update `Receipt` mutation."""
type UpdateReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Receipt` that was updated by this mutation."""
  receipt: Receipt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChartOfAccount` that is related to this `Receipt`."""
  chartOfAccountByAccountId: ChartOfAccount

  """Reads a single `Invoice` that is related to this `Receipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `Receipt`. May be used by Relay 1."""
  receiptEdge(
    """The method to use when ordering `Receipt`."""
    orderBy: [ReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReceiptsEdge
}

"""All input for the `updateRegionByRegionId` mutation."""
input UpdateRegionByRegionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Region` being updated.
  """
  regionPatch: RegionPatch!
  regionId: Int!
}

"""All input for the `updateRegion` mutation."""
input UpdateRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Region` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Region` being updated.
  """
  regionPatch: RegionPatch!
}

"""The output of our update `Region` mutation."""
type UpdateRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Region` that was updated by this mutation."""
  region: Region

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Region`. May be used by Relay 1."""
  regionEdge(
    """The method to use when ordering `Region`."""
    orderBy: [RegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegionsEdge
}

"""All input for the `updateSubBillPaymentBySubBillPaymentId` mutation."""
input UpdateSubBillPaymentBySubBillPaymentIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SubBillPayment` being updated.
  """
  subBillPaymentPatch: SubBillPaymentPatch!
  subBillPaymentId: Int!
}

"""All input for the `updateSubBillPayment` mutation."""
input UpdateSubBillPaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubBillPayment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SubBillPayment` being updated.
  """
  subBillPaymentPatch: SubBillPaymentPatch!
}

"""The output of our update `SubBillPayment` mutation."""
type UpdateSubBillPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubBillPayment` that was updated by this mutation."""
  subBillPayment: SubBillPayment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `BillPayment` that is related to this `SubBillPayment`."""
  billPaymentByBillPaymentId: BillPayment

  """Reads a single `Bill` that is related to this `SubBillPayment`."""
  billByBillId: Bill

  """An edge for our `SubBillPayment`. May be used by Relay 1."""
  subBillPaymentEdge(
    """The method to use when ordering `SubBillPayment`."""
    orderBy: [SubBillPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubBillPaymentsEdge
}

"""All input for the `updateSubReceiptBySubReceiptId` mutation."""
input UpdateSubReceiptBySubReceiptIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SubReceipt` being updated.
  """
  subReceiptPatch: SubReceiptPatch!
  subReceiptId: Int!
}

"""All input for the `updateSubReceipt` mutation."""
input UpdateSubReceiptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubReceipt` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SubReceipt` being updated.
  """
  subReceiptPatch: SubReceiptPatch!
}

"""The output of our update `SubReceipt` mutation."""
type UpdateSubReceiptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubReceipt` that was updated by this mutation."""
  subReceipt: SubReceipt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Receipt` that is related to this `SubReceipt`."""
  receiptByReceiptId: Receipt

  """Reads a single `Invoice` that is related to this `SubReceipt`."""
  invoiceByInvoiceId: Invoice

  """An edge for our `SubReceipt`. May be used by Relay 1."""
  subReceiptEdge(
    """The method to use when ordering `SubReceipt`."""
    orderBy: [SubReceiptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubReceiptsEdge
}

"""All input for the `updateTaxByTaxId` mutation."""
input UpdateTaxByTaxIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tax` being updated.
  """
  taxPatch: TaxPatch!
  taxId: Int!
}

"""All input for the `updateTax` mutation."""
input UpdateTaxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tax` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tax` being updated.
  """
  taxPatch: TaxPatch!
}

"""The output of our update `Tax` mutation."""
type UpdateTaxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tax` that was updated by this mutation."""
  tax: Tax

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tax`. May be used by Relay 1."""
  taxEdge(
    """The method to use when ordering `Tax`."""
    orderBy: [TaxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxesEdge
}

"""All input for the `updateTransactionByTransactionId` mutation."""
input UpdateTransactionByTransactionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Transaction` being updated.
  """
  transactionPatch: TransactionPatch!
  transactionId: Int!
}

"""All input for the `updateTransaction` mutation."""
input UpdateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Transaction` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Transaction` being updated.
  """
  transactionPatch: TransactionPatch!
}

"""The output of our update `Transaction` mutation."""
type UpdateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was updated by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the `updateVendorByVendorId` mutation."""
input UpdateVendorByVendorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Vendor` being updated.
  """
  vendorPatch: VendorPatch!
  vendorId: Int!
}

"""All input for the `updateVendor` mutation."""
input UpdateVendorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Vendor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Vendor` being updated.
  """
  vendorPatch: VendorPatch!
}

"""The output of our update `Vendor` mutation."""
type UpdateVendorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Vendor` that was updated by this mutation."""
  vendor: Vendor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Vendor`. May be used by Relay 1."""
  vendorEdge(
    """The method to use when ordering `Vendor`."""
    orderBy: [VendorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VendorsEdge
}

type Vendor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  vendorId: Int!
  name: String
  address: String
  city: String
  province: String
  country: String
  phone: String
  note: String

  """Reads and enables pagination through a set of `PurchaseOrder`."""
  purchaseOrdersByVendorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PurchaseOrder`."""
    orderBy: [PurchaseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseOrderCondition
  ): PurchaseOrdersConnection!

  """Reads and enables pagination through a set of `Bill`."""
  billsByVendorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Bill`."""
    orderBy: [BillsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BillCondition
  ): BillsConnection!
}

"""
A condition to be used against `Vendor` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VendorCondition {
  """Checks for equality with the object’s `vendorId` field."""
  vendorId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `province` field."""
  province: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `note` field."""
  note: String
}

"""An input for mutations affecting `Vendor`"""
input VendorInput {
  vendorId: Int
  name: String
  address: String
  city: String
  province: String
  country: String
  phone: String
  note: String
}

"""
Represents an update to a `Vendor`. Fields that are set will be updated.
"""
input VendorPatch {
  vendorId: Int
  name: String
  address: String
  city: String
  province: String
  country: String
  phone: String
  note: String
}

"""A connection to a list of `Vendor` values."""
type VendorsConnection {
  """A list of `Vendor` objects."""
  nodes: [Vendor]!

  """
  A list of edges which contains the `Vendor` and cursor to aid in pagination.
  """
  edges: [VendorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Vendor` you could get from the connection."""
  totalCount: Int!
}

"""A `Vendor` edge in the connection."""
type VendorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Vendor` at the end of the edge."""
  node: Vendor
}

"""Methods to use when ordering `Vendor`."""
enum VendorsOrderBy {
  NATURAL
  VENDOR_ID_ASC
  VENDOR_ID_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  CITY_ASC
  CITY_DESC
  PROVINCE_ASC
  PROVINCE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PHONE_ASC
  PHONE_DESC
  NOTE_ASC
  NOTE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
